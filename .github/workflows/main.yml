name: Build Windows Installer

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

env:
  PYTHON_VERSION: 3.9

permissions:
  contents: write

jobs:
  build:
    name: Build Windows EXE
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Verify icon file
      run: |
        echo "Current directory: $(Get-Location)"
        echo "Icon file exists: $(Test-Path app_icon.ico)"
        if (Test-Path app_icon.ico) {
          echo "Icon file size: $((Get-Item app_icon.ico).Length) bytes"
        } else {
          echo "WARNING: Icon file not found!"
          echo "Files in directory:"
          Get-ChildItem
        }
      shell: powershell
        
    - name: Cache Python dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: ./.cache/pip
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install PyInstaller
      run: |
        pip install pyinstaller
        
    - name: Build Application Directory
      run: |
        # Setting the icon path with double quotes to handle spaces
        $iconPath = "$((Get-Location).Path)\app_icon.ico"
        Write-Host "Using icon at path: $iconPath"
        
        # Check if icon exists before running PyInstaller
        if (-not (Test-Path $iconPath)) {
          Write-Host "ERROR: Icon file not found at $iconPath"
          exit 1
        }
        
        # Run PyInstaller with the icon path
        pyinstaller --onedir --windowed --name MedicalOfficeApp `
          --hidden-import babel.numbers `
          --hidden-import babel.dates `
          --hidden-import json `
          --hidden-import sqlite3 `
          --hidden-import logging `
          --exclude-module matplotlib.tests `
          --exclude-module numpy.random.tests `
          --exclude-module pandas.tests `
          --exclude-module unittest `
          --exclude-module doctest `
          --icon="$iconPath" `
          --noupx `
          --clean `
          app.py
      shell: powershell
        
    - name: Download Inno Setup
      run: |
        curl -L -o innosetup.exe "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
      shell: bash

    - name: Install Inno Setup
      run: |
        ./innosetup.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-
        echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell

    - name: Create Inno Setup Script
      run: |
        @echo off
        (
          echo [Setup]
          echo AppName=Medical Office App
          echo AppVersion=1.0
          echo AppPublisher=Dr. Mohammed Mehdi Bouchene
          echo AppPublisherURL=https://bakha-pneumo.netlify.app/
          echo DefaultDirName={autopf}\Medical Office App
          echo DefaultGroupName=Medical Office App
          echo OutputDir=.\dist
          echo OutputBaseFilename=MedicalOfficeSetup
          echo Compression=lzma2/ultra64
          echo SolidCompression=yes
          echo LZMAUseSeparateProcess=yes
          echo LZMADictionarySize=1048576
          echo LZMANumFastBytes=273
          echo WizardStyle=modern
          echo UninstallDisplayIcon={app}\MedicalOfficeApp.exe
          echo MinVersion=6.1
          echo SetupIconFile=app_icon.ico
          echo WizardImageFile=installer_image.bmp
          echo WizardSmallImageFile=installer_small.bmp
          echo DisableDirPage=no
          echo.
          echo [Languages]
          echo Name: "english"; MessagesFile: "compiler:Default.isl"
          echo.
          echo [Tasks]
          echo Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
          echo.
          echo [Files]
          echo Source: "dist\MedicalOfficeApp\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          echo Source: "app_icon.ico"; DestDir: "{app}"; Flags: ignoreversion
          echo ; NOTE: Don't use "Flags: ignoreversion" on any shared system files
          echo.
          echo [Icons]
          echo Name: "{group}\Medical Office App"; Filename: "{app}\MedicalOfficeApp.exe"; IconFilename: "{app}\app_icon.ico"
          echo Name: "{group}\{cm:UninstallProgram,Medical Office App}"; Filename: "{uninstallexe}"
          echo Name: "{autodesktop}\Medical Office App"; Filename: "{app}\MedicalOfficeApp.exe"; IconFilename: "{app}\app_icon.ico"; Tasks: desktopicon
          echo.
          echo [Run]
          echo Filename: "{app}\MedicalOfficeApp.exe"; Description: "{cm:LaunchProgram,Medical Office App}"; Flags: nowait postinstall skipifsilent
          echo.
          echo [InstallDelete]
          echo Type: filesandordirs; Name: "{app}\*.log"
          echo Type: filesandordirs; Name: "{app}\__pycache__"
          echo.
          echo [UninstallDelete]
          echo Type: filesandordirs; Name: "{app}\*.log"
          echo Type: filesandordirs; Name: "{app}\__pycache__"
        ) > installer.iss
      shell: cmd

    - name: Create Installer Images
      run: |
        # Create simple bitmap files for installer
        $imageWidth = 164
        $imageHeight = 314
        $smallWidth = 55
        $smallHeight = 58
        
        # Create main wizard image
        Add-Type -AssemblyName System.Drawing
        $bitmap = New-Object System.Drawing.Bitmap $imageWidth, $imageHeight
        $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
        $graphics.Clear([System.Drawing.Color]::White)
        $bitmap.Save("installer_image.bmp", [System.Drawing.Imaging.ImageFormat]::Bmp)
        $graphics.Dispose()
        $bitmap.Dispose()
        
        # Create small wizard image
        $bitmap = New-Object System.Drawing.Bitmap $smallWidth, $smallHeight
        $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
        $graphics.Clear([System.Drawing.Color]::LightBlue)
        $bitmap.Save("installer_small.bmp", [System.Drawing.Imaging.ImageFormat]::Bmp)
        $graphics.Dispose()
        $bitmap.Dispose()
        
        # Verify images exist
        Get-Item "installer_image.bmp", "installer_small.bmp" | Select-Object Name, Length
      shell: powershell

    - name: Compile Installer with Inno Setup
      run: |
        iscc installer.iss
      shell: cmd

    - name: Upload Installer Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist/MedicalOfficeSetup.exe

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/MedicalOfficeSetup.exe
        
    - name: Status report
      run: |
        echo "Build completed successfully!"
        echo "Executable size:"
        Get-Item dist\MedicalOfficeSetup.exe | ForEach-Object { "{0:N2} MB" -f ($_.length / 1MB) }
      shell: powershell
